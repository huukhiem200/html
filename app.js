// app.js (Phi√™n b·∫£n Ho√†n Ch·ªânh Cu·ªëi c√πng: ·ªîn ƒë·ªãnh tr√™n Web v√† Test)

const DATA_FILE = 'faqs.json'; 
let allFaqsData = []; // Bi·∫øn ch√≠nh ch·ª©a d·ªØ li·ªáu, ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c h√†m
let displayArea = null; 
let searchInput = null;

// H√†m getter ƒë·ªÉ l·∫•y ph·∫ßn t·ª≠ DOM khi ch·∫°y trong tr√¨nh duy·ªát
const getDisplayArea = () => document.getElementById('data-display-area');
const getSearchInput = () => document.getElementById('header-search-input');


/**
 * Hi·ªÉn th·ªã tr·∫°ng th√°i (Loading, Error, Empty)
 */
function renderState(state, message, displayArea) {
    if (!displayArea) return; 
    
    let icon = '';
    let title = '';
    
    switch (state) {
        case 'loading':
            icon = '‚è≥';
            title = 'ƒêang T·∫£i D·ªØ li·ªáu...';
            break;
        case 'error':
            icon = '‚ùå';
            title = 'L·ªói T·∫£i D·ªØ li·ªáu!';
            break;
        case 'empty':
            icon = 'ü§∑';
            title = 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o.'; 
            break;
        default:
            return;
    }

    displayArea.innerHTML = `
        <div class="state-message state-message--${state}" aria-live="polite">
            <div class="state-message__icon">${icon}</div>
            <h3 class="state-message__title">${title}</h3>
            <p class="state-message__details">${message}</p>
        </div>
    `;
}

/**
 * Hi·ªÉn th·ªã danh s√°ch FAQ.
 */
function renderFaqs(faqs, displayArea) {
    if (!displayArea) return; 
    
    if (!faqs || faqs.length === 0) {
        renderState('empty', 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a b·∫°n t√¨m ki·∫øm.', displayArea);
        return;
    }
    
    const faqListHTML = faqs.map(faq => `
        <details class="faq-item">
            <summary class="faq-item__question">‚ùì ${faq.question}</summary>
            <div class="faq-item__answer">
                <p>‚úÖ ${faq.answer}</p>
            </div>
        </details>
    `).join('');

    displayArea.innerHTML = faqListHTML;
}

/**
 * L·ªçc FAQ d·ª±a tr√™n t·ª´ kh√≥a t√¨m ki·∫øm (LIVE SEARCH)
 */
function filterFaqs() {
    // S·ª¨ D·ª§NG BI·∫æN TO√ÄN C·ª§C allFaqsData (ƒë√£ ƒë∆∞·ª£c g√°n gi√° tr·ªã trong Test ho·∫∑c fetchData)
    const dataToFilter = allFaqsData; 

    const searchInput = getSearchInput();
    const displayArea = getDisplayArea();

    if (!searchInput || !displayArea) return; 
    
    const keyword = searchInput.value.toLowerCase().trim();
    
    if (!keyword) {
        renderFaqs(dataToFilter, displayArea);
        return;
    }

    const filteredFaqs = dataToFilter.filter(faq => 
        faq.question.toLowerCase().includes(keyword) || 
        faq.answer.toLowerCase().includes(keyword)
    );

    renderFaqs(filteredFaqs, displayArea);
    
    // Cu·ªôn ƒë·∫øn ph·∫ßn FAQ (ch·ªâ ch·∫°y trong tr√¨nh duy·ªát th·ª±c)
    if (typeof document !== 'undefined') {
        const faqListSection = document.getElementById('faq-list');
        if (faqListSection) { 
            faqListSection.scrollIntoView({ behavior: 'smooth' });
        }
    }
}


/**
 * H√†m ch√≠nh ƒë·ªÉ t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu.
 */
async function fetchDataAndRender() {
    if (typeof document === 'undefined') return;

    const displayArea = getDisplayArea();
    const searchInput = getSearchInput();
    
    if (!displayArea) return;

    renderState('loading', 'Vui l√≤ng ch·ªù trong gi√¢y l√°t, UniFAQ ƒëang k·∫øt n·ªëi v·ªõi m√°y ch·ªß d·ªØ li·ªáu...', displayArea);

    try {
        const response = await fetch(DATA_FILE);
        
        if (!response.ok) {
            throw new Error(`L·ªói HTTP: ${response.status}`);
        }

        const data = await response.json();

        if (!Array.isArray(data) || data.length === 0) {
            renderState('empty', `T·ªáp d·ªØ li·ªáu FAQ b·ªã tr·ªëng. Vui l√≤ng ki·ªÉm tra ${DATA_FILE}.`, displayArea);
            return;
        }

        // G√ÅN CHO BI·∫æN TO√ÄN C·ª§C
        allFaqsData = data; 
        renderFaqs(allFaqsData, displayArea);

        if (searchInput) {
            searchInput.addEventListener('keyup', filterFaqs);
        }
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error); 
        renderState('error', `Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ t·ªáp **${DATA_FILE}**. Chi ti·∫øt: ${error.message}`, displayArea);
    }
}

// Ch·∫°y h√†m ch√≠nh khi DOM ƒë√£ t·∫£i xong
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', fetchDataAndRender);
}


// --- B·∫¢O V·ªÜ C√ö PH√ÅP NODE.JS (module is not defined) ---

const exportsForTesting = {
    renderState,
    renderFaqs,
    fetchDataAndRender,
    filterFaqs,
    // Export allFaqsData ƒë·ªÉ Jest c√≥ th·ªÉ g√°n gi√° tr·ªã v√† test
    get allFaqsData() { return allFaqsData; },
    set allFaqsData(val) { allFaqsData = val; }, 
    
    displayArea, 
    searchInput, 
    getDisplayArea, 
    getSearchInput 
};

if (typeof module !== 'undefined' && module.exports) {
    module.exports = exportsForTesting;
}