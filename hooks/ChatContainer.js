// File: hooks/ChatContainer.js (ƒê√£ s·ª≠a l·ªói this.sleep)

// S·ª≠a l·ªói ESLint: import/no-useless-path-segments
import { findTopFaqs } from '../hooks/useFaqSearch.js'; 

/**
 * H√ÄM H·ªñ TR·ª¢: Gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ (Sleep) - ƒê√É ƒê∆Ø·ª¢C T√ÅCH KH·ªéI CLASS
 */
// eslint-disable-next-line arrow-body-style
const sleep = (ms) => new Promise((resolve) => { setTimeout(resolve, ms); });

/**
 * ChatContainer (L·ªõp Logic: X·ª≠ l√Ω State v√† D·ªØ li·ªáu)
 */
export class ChatContainer {
  constructor(presenter) {
    this.presenter = presenter;
    this.GEMINI_API_KEY = 'AIzaSyCYZOtTycH6N5lOG63r7RZrpBrpDRtZCVo'; 
    this.DATA_FILE = './assets/faqs.json';
    this.messages = [];
    this.allFaqs = [];
    this.isChatOpen = false;
    this.mode = 'suggestions'; 
    this.currentKeyword = '';
  }

  async init() {
    this.presenter.renderLayout(); 
    this.bindPresenterEvents();
    await this.loadFaqs();
    this.render();
  }

  async loadFaqs() {
    try {
      const response = await fetch(this.DATA_FILE);
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i file FAQs.');
      }
      this.allFaqs = await response.json();
    } catch (error) {
      console.error('L·ªói t·∫£i FAQs:', error);
    }
  }

  bindPresenterEvents() {
    const handlers = {
      onToggleChat: () => this.handleToggleChat(),
      onCloseChat: () => this.handleCloseChat(),
      onHeaderSearch: (text) => this.handleHeaderSearch(text),
      onPageSuggestion: (question) => this.handlePageSuggestion(question),
      onChatInput: (text) => this.handleChatInput(text),
      onSendMessage: (text) => this.handleSendMessage(text),
    };
    this.presenter.bindEvents(handlers);

    if (this.presenter.chatForm) { 
      this.presenter.chatForm.addEventListener('suggestionClicked', (e) => {
        this.handleSendMessage(e.detail);
      });
    }
  }

  handleToggleChat() {
    this.isChatOpen = !this.isChatOpen;
    console.log(`[DEBUG] Tr·∫°ng th√°i chat: ${this.isChatOpen ? 'M·ªû' : 'ƒê√ìNG'}`); 
    this.presenter.toggleChatWindow(this.isChatOpen);
    
    if (this.isChatOpen) {
      if (this.messages.length === 0) {
        this.mode = 'suggestions';
        this.currentKeyword = '';
        this.render();
      } else {
        this.mode = 'chat';
        this.render();
      }
    }
  }

  handleCloseChat() {
    this.isChatOpen = false;
    this.presenter.toggleChatWindow(false);
    
    this.messages = [];
    this.mode = 'suggestions';
    this.currentKeyword = '';
    this.presenter.resetChatUI();
    this.presenter.setUIBusy(false);
  }

  // eslint-disable-next-line class-methods-use-this
  handleHeaderSearch(text) {
    console.log('T√¨m ki·∫øm tr√™n Header:', text);
  }

  handlePageSuggestion(question) {
    this.isChatOpen = true;
    this.presenter.toggleChatWindow(true);
    this.handleSendMessage(question);
  }

  handleChatInput(text) {
    if (this.messages.length === 0 || this.mode === 'suggestions') {
      this.mode = 'suggestions';
      this.currentKeyword = text.trim();
      this.render();
    }
  }

 // File: containers/ChatContainer.js (H√†m handleSendMessage ƒë√£ s·ª≠a)

async handleSendMessage(text) {
  this.mode = 'chat';
  this.currentKeyword = ''; 
  
  // 1. G·ª≠i tin nh·∫Øn ng∆∞·ªùi d√πng v√† ƒë·∫∑t tr·∫°ng th√°i b·∫≠n
  this.messages.push({ sender: 'user', text });
  this.presenter.displayMessages(this.messages);
  this.presenter.setUIBusy(true);

  // 2. Th√™m ch·ªâ b√°o ƒëang g√µ
  this.messages.push({ sender: 'bot', text: '<span></span><span></span><span></span>' });
  this.presenter.displayMessages(this.messages);
  
  let answerText = '';
  
  // 3. üö® B∆Ø·ªöC M·ªöI: G·ªçi Gemini tr∆∞·ªõc ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi CHUNG (General Knowledge)
  const geminiAnswer = await this.getGeminiAnswer(text);

  if (!geminiAnswer.includes('[REFUSAL_UNIFORM]')) {
    // K·ªãch b·∫£n 1: Gemini ƒê√É TR·∫¢ L·ªúI C√ÇU H·ªéI CHUNG (v√≠ d·ª•: S∆°n T√πng, Faker, l·ªãch s·ª≠)
    answerText = geminiAnswer;

  } else {
    // üö® K·ªãch b·∫£n 2: Gemini T·ª™ CH·ªêI TR·∫¢ L·ªúI (v√¨ n√≥ nghƒ© ƒë√≥ l√† c√¢u h·ªèi n·ªôi b·ªô/UniFAQ)
    
    // 4. T√¨m ki·∫øm FAQ c√≥ s·∫µn (Offline search)
    const faqAnswer = this.findAnswer(text);

    if (faqAnswer) {
      // 4a. T√¨m th·∫•y FAQ: Tr·∫£ l·ªùi n·ªôi b·ªô
      answerText = `D·ª±a tr√™n c√¢u h·ªèi th∆∞·ªùng g·∫∑p, c√¢u tr·∫£ l·ªùi l√†: **${faqAnswer}**`;
    } else {
      // 4b. Kh√¥ng t√¨m th·∫•y FAQ: Tr·∫£ l·ªùi t·ª´ ch·ªëi cu·ªëi c√πng
      answerText = 'Xin l·ªói, t√¥i ch∆∞a t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ch√≠nh x√°c n√†o trong h·ªá th·ªëng FAQ c·ªßa tr∆∞·ªùng ho·∫∑c c∆° s·ªü d·ªØ li·ªáu chung. Vui l√≤ng li√™n h·ªá Ph√≤ng C√¥ng t√°c Sinh vi√™n.';
    }
  }
  
  // 5. C·∫≠p nh·∫≠t UI
  this.messages.pop(); // X√≥a tin nh·∫Øn ƒëang g√µ
  this.messages.push({ sender: 'bot', text: answerText });
  
  this.presenter.displayMessages(this.messages);
  this.presenter.setUIBusy(false);
}

  findAnswer(question) {
    const topFaqs = findTopFaqs(question, this.allFaqs);
    
    if (topFaqs.length > 0) {
      const bestMatch = topFaqs[0];
      // Ng∆∞·ª°ng ƒëi·ªÉm t·ªëi thi·ªÉu l√† 6 (t·ª©c 2 t·ª´ kh√≥a kh·ªõp trong c√¢u h·ªèi)
      if (bestMatch.score >= 6) { 
          return bestMatch.answer; 
      }
    }
    
    return null; 
  }
  
  /**
   * H√ÄM G·ªåI API GEMINI TH·ª∞C T·∫æ (Kh√¥ng c·∫ßn THIS)
   */
  // eslint-disable-next-line class-methods-use-this, max-len
  async getGeminiAnswer(question) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${this.GEMINI_API_KEY}`;
    
    const systemInstruction = `B·∫°n l√† UniFAQ, m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch. H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa sinh vi√™n m·ªôt c√°ch ng·∫Øn g·ªçn, th√¢n thi·ªán v√† chuy√™n nghi·ªáp. C√¢u h·ªèi: ${question}`;

    const body = {
      contents: [{ role: 'user', parts: [{ text: systemInstruction }] }],
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('L·ªñI G·ªåI API GEMINI (HTTP ERROR):', response.status, errorData);
        throw new Error(`API Error: ${response.status} - ${errorData.error.message || 'Unknown error'}`);
      }

      const data = await response.json();
      const answer = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (answer && answer.includes('[REFUSAL_UNIFORM]')) {
          // N·∫øu Gemini tr·∫£ v·ªÅ chu·ªói t·ª´ ch·ªëi, ch√∫ng ta s·∫Ω x·ª≠ l√Ω n√≥ trong handleSendMessage
          return '[REFUSAL_UNIFORM]';
      }
      if (answer) {
        return answer; // Tr·∫£ l·ªùi c√¢u h·ªèi chung
      }
      
      return 'Xin l·ªói, Gemini kh√¥ng t·∫°o ra c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi n√†y. Vui l√≤ng th·ª≠ l·∫°i c√¢u h·ªèi kh√°c ho·∫∑c li√™n h·ªá Ph√≤ng C√¥ng t√°c Sinh vi√™n.';

    } catch (error) {
      console.error('L·ªñI K·∫æT N·ªêI API GEMINI (NETWORK/LOGIC):', error);
      // Fallback message khi c√≥ l·ªói k·∫øt n·ªëi ho·∫∑c l·ªói logic
      return 'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi v·ªõi h·ªá th·ªëng AI. Vui l√≤ng ki·ªÉm tra l·∫°i **GEMINI_API_KEY** ho·∫∑c th·ª≠ l·∫°i sau.';
    }
  }

  render() {
    if (this.mode === 'suggestions') {
      const suggestions = findTopFaqs(this.currentKeyword, this.allFaqs);
      this.presenter.displaySuggestions(suggestions, this.currentKeyword);
    } else {
      this.presenter.displayMessages(this.messages);
    }
  }
}